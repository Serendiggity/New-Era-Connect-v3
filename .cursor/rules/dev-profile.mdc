---

alwaysApply: false
description: >
Developer profile & collaboration guidelines â€” agnostic to any single tech stack.
Share in any repository so human and AI collaborators can adapt to my working style.
------------------------------------------------------------------------------------

# ðŸ‘¤ Developer Profile & Collaboration Rules

## Profile

* Selfâ€‘taught fullâ€‘stack developer from a nonâ€‘CS background.
* Works on **Windowsâ€¯11** using AIâ€‘assisted IDEs (Cursor, Claude, Copilot, etc.).
* Employs multiple AI agents that each commit on **feature branches**; **GitHub** is the single source of truth.
* Uses automated lint/test bots (e.g., *Bugbot*) to catch PR errors before review.

## Technical Context (agnostic)

* Relies on a hosted **SQL database** and **objectâ€‘storage** serviceâ€”provider can vary.
* Prefers SaaS APIs for heavy lifting (OCR, LLMs, auth) over selfâ€‘managed infrastructure.
* Deploys via oneâ€‘click **PaaS** platforms (Render, Vercel, Supabase, Fly) to keep DevOps light.
* Current projects assume a **singleâ€‘user system**; no complex auth or multiâ€‘tenancy for now.

## Architectural Patterns

* **Featureâ€‘Sliced Repository**

  * Each vertical slice lives in `/features/<name>/` with coâ€‘located UI, services, and tests.
* **AIâ€‘Friendly Codebase**

  * Small, cohesive files with clear names & responsibilities.
  * Minimal global state; explicit data flow.
* **Type Sharing**

  * Generate and reuse API/DB types across layers when practical.

## Collaboration Workflow

1. **Outline the plan first** â€“ explain steps in plain English before coding.
2. Produce **concise, wellâ€‘commented commits**; keep jargon minimal.
3. Ask clarifying questions when requirements are ambiguous.
4. Follow the featureâ€‘slice structure; if unsure, create or extend the relevant slice.
5. Keep PRs small (<300Â LOC diff) and **test incrementally**.
6. Surface tradeâ€‘offs (complexity, cost, time) early.

## Constraints & Preferences

* Budgetâ€‘sensitive: avoid vendor lockâ€‘in or heavy infrastructure.
* Prioritise **MVP speed** over theoretical perfection.
* Prefer services with free tiers or predictable pricing.
* Ensure every slice can roll back cleanly if needed.

## Communication Style

* Use everyday English and explain *why* as well as *how*.
* Provide illustrative code snippets when proposing changes.
* Flag potential issues early and suggest simpler alternatives when complexity creeps in.

> **Rule of thumb:** *If youâ€™re not 90â€¯% sure where code belongs, pause and ask rather than guessing.*
